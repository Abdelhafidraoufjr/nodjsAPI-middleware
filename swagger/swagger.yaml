openapi: 3.0.0
info:
  title: API Utilisateur
  version: 1.0.0
  description: API REST pour gérer l'enregistrement, l'authentification et l'accès aux informations utilisateur.

servers:
  - url: http://localhost:3000

paths:
  /api/register:
    post:
      tags:
        - Users
      summary: Créer un utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - nom
                - prenom
                - username
              properties:
                nom:
                  type: string
                  example: Dupont
                prenom:
                  type: string
                  example: Jean
                username:
                  type: string
                  example: jeandupont
                genre:
                  type: string
                  enum: [homme, femme]
                  example: homme
                age:
                  type: integer
                  example: 30
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '201':
          description: Utilisateur créé.
        '400':
          description: Erreur de validation ou utilisateur existant

  /api/login:
    post:
      tags:
        - Users
      summary: Connexion utilisateur et récupération du token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Connexion réussie, retourne un token JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Identifiants invalides

  /api/me:
    get:
      tags:
        - Users
      summary: Obtenir les informations de l'utilisateur connecté
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Données utilisateur
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  nom:
                    type: string
                  prenom:
                    type: string
                  username:
                    type: string
                  email:
                    type: string
                  genre:
                    type: string
                  age:
                    type: integer
        '401':
          description: Token manquant ou invalide

  /api/users:
    get:
      tags:
        - Users
      summary: Obtenir tous les utilisateurs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    nom:
                      type: string
                    prenom:
                      type: string
                    username:
                      type: string
                    email:
                      type: string
                    genre:
                      type: string
                    age:
                      type: integer
        '401':
          description: Token manquant ou invalide

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Obtenir un utilisateur par ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Détails de l'utilisateur
        '404':
          description: Utilisateur non trouvé
    patch:
      tags:
        - Users
      summary: Mettre à jour un utilisateur par ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                prenom:
                  type: string
                username:
                  type: string
                email:
                  type: string
                genre:
                  type: string
                  enum: [homme, femme]
                age:
                  type: integer
      responses:
        '200':
          description: Utilisateur mis à jour
        '400':
          description: Erreur de validation
        '404':
          description: Utilisateur non trouvé
    head:
      tags:
        - Users
      summary: Vérifier si un utilisateur existe
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Utilisateur trouvé
        '404':
          description: Utilisateur non trouvé

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
